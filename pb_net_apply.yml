---
# ---------------------------------------------------------------------
# Play - Basic Config such as Hostname, Domain, SNMP, logging, NTP info
# ---------------------------------------------------------------------
- name: Configure Device Basic Information
  hosts: aln
  tags: basic_config
  gather_facts: no
  tasks:
  - name: Configure Hostname / Domain-name
    cisco.ios.ios_system:
      hostname: "{{ inventory_hostname }}"
      domain_name: "{{ domain_name }}"
      lookup_enabled: no
      name_servers: "{{ dns_servers }}"
    tags:
    - basic
    - dns
    notify: save_cfg

  - name: Configure NTP
    cisco.ios.ios_ntp:
      server: "{{ ntp_server }}"
      logging: true
      state: present
      key_id: "10"
      auth_key: 15435A030726242723273C21181319000A
      auth: true
    tags:
    - basic
    - ntp
    notify: save_cfg
  
  - name: Get Running Config
    cisco.ios.ios_command:
      commands:
      - sh run
    register: running_config
    tags:
    - basic
    - ntp
  
  - name: Get Current List if NTP Servers
    set_fact: ntp_servers_in_cfg="{{
      running_config.stdout[0] |
      regex_findall('^ntp server (\S+)', multiline=True) }}"
    tags:
    - basic
    - ntp
  
  - name: Remove Old NTP Servers
    cisco.ios.ios_config:
      lines:
      - "no ntp server {{ item }}"
    when: item != ntp_server
    loop: "{{ ntp_servers_in_cfg }}"
    tags:
    - basic
    - ntp
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# ---------------------------------
# Play - Configure L2 Transit Links
# ---------------------------------
- name: Configure L2 Transit Links
  hosts: aln_fab:aln_core:aln_fw
  tags: l2_switchport
  gather_facts: no
  tasks:
  - name: Create Transit Vlans in DB
    cisco.ios.ios_vlans:
      config:
      - name: "{{ item.name }}"
        vlan_id: "{{ item.vlan }}"
        state: active
        shutdown: disabled
      state: merged
    tags:
    - vlan_db
    loop: "{{ transit_vlans }}"
    notify: save_cfg

  - name: Configure L2 Transit Interface Description and MTU
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        mtu: "{{ phys_intf_mtu }}"
        description: "{{ item.description }}"
      state: merged
    tags:
    - l2_switchport
    loop: "{{ 
      l2_transit_interfaces[inventory_hostname] }}"
    notify: save_cfg

  - name: Configure L2 Transit Interface With Mode Access
    cisco.ios.ios_l2_interfaces:
      config:
      - name: "{{ item.name }}"
        mode: access
        access:
          vlan: "{{ item.vlan }}"
      state: merged
    tags:
    - access_port
    loop: "{{ l2_transit_interfaces[inventory_hostname] }}"
    notify: save_cfg

  - name: Interface Admin State
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        enabled: "{{ item.enabled }}"
    loop: "{{ l2_transit_interfaces[inventory_hostname] }}"
    tags:
    - admin_state
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# ----------------------------------------
# Play - Configure L2 Tenant Network Links
# ----------------------------------------
- name: Configure L2 Tenant Network Links
  hosts: aln_fab
  tags: l2_switchport
  gather_facts: no
  tasks:
  - name: Configure L2 Tenant Interface Description and MTU
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        mtu: "{{ phys_intf_mtu }}"
        description: "{{ item.description }}"
      state: merged
    tags:
    - l2_switchport
    loop: "{{ l2_tenant_interfaces[inventory_hostname] }}"
    notify: save_cfg

  - name: Configure Trunk Ports
    cisco.ios.ios_l2_interfaces:
      config:
      - name: "{{ item.name }}"
        mode: trunk
        trunk:
          allowed_vlans: "{{ item.allowed_vlans }}"
          native_vlan: 1
          encapsulation: dot1q
      state: merged
    tags:
    - trunk_port
    loop: "{{ l2_tenant_interfaces[inventory_hostname] }}"
    notify: save_cfg

  - name: Interface Admin State
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        enabled: "{{ item.enabled }}"
    loop: "{{ l2_tenant_interfaces[inventory_hostname] }}"
    tags:
    - admin_state
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# ----------------------------------------------------------------------------------
# Play - Change Switchports to Routed Ports Before Configuring L3 Transit Interfaces
# ----------------------------------------------------------------------------------
- name: Change Switchports to Routed Ports Before Configuring L3 Interfaces
  hosts: aln_fab:aln_core
  tags: routed_switchport
  gather_facts: no
  tasks:
  - name: Execute No Switchport Command on Switch Ports
    cisco.ios.ios_config:
      lines:
      - no switchport
      parents:
      - interface {{ item.name }}
    loop: "{{ l3_transit_interfaces[inventory_hostname] | selectattr('physical', 'equalto', true) }}"
    tags:
    - switchport
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode


# ---------------------------------
# Play - Create VRFs On All Devices
# ---------------------------------
- name: Create VRFs On All Devices
  hosts: aln
  tags: vrf
  gather_facts: no
  tasks:
  - name: Create VRFs
    cisco.ios.ios_vrf:
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      rd: "{{ item.rd }}"
      route_both: "{{ item.route_both }}"
      state: present
    loop: "{{ vrfs }}"
    when: item.name in l3_transit_interfaces[inventory_hostname] |
        selectattr('vrf', 'equalto', item.name ) |
        map(attribute='vrf') | list
    tags:
    - vrf
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# ----------------------------------------------------------------------------
# Play - Configure Physical, VLAN, Tunnel & Loopback Interfaces On All Devices
# ----------------------------------------------------------------------------
- name: Configure Device Interfaces
  hosts: aln
  tags: l3_interface
  gather_facts: no
  tasks:
  - name: Configure Underlay Interfaces with Lower MTU
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        mtu: "{{ underlay_mtu }}"
        description: "{{ item.description }}"
      state: merged
    tags:
    - underlay
    loop: "{{ 
      l3_transit_interfaces[inventory_hostname] |
      selectattr('underlay', 'equalto', true) |
      list }}"
    notify: save_cfg

  - name: Configure Physical Interfaces
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        mtu: "{{ phys_intf_mtu }}"
        description: "{{ item.description }}"
      state: merged
    tags:
    - interface
    - physical
    loop: "{{ 
      l3_transit_interfaces[inventory_hostname] |
      selectattr('physical', 'equalto', true) |
      list }}"
    notify: save_cfg

  - name: Configure Tunnel & Loopback Interfaces
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        description: "{{ item.description }}"
      state: merged
    tags:
    - tunnel
    - loopback
    loop: "{{
      l3_transit_interfaces[inventory_hostname] |
      selectattr('physical', 'equalto', false) |
      list }}"
    notify: save_cfg

  - name: Associate Interface to VRF
    cisco.ios.ios_config:
      lines:
      - vrf forwarding {{ item.vrf }}
      parents:
      - interface {{ item.name }}
    loop: "{{ l3_transit_interfaces[inventory_hostname] }}"
    tags:
    - vrf_interface
    notify: save_cfg

  - name: Assign IPv4 Address to Interfaces
    cisco.ios.ios_l3_interfaces:
      config: 
      - name: "{{ item.name }}"
        ipv4:
        - address: "{{ item.cidr | ipv4(item.host_ip_index) }}" 
    loop: "{{ l3_transit_interfaces[inventory_hostname] }}"
    tags:
    - ip_address
    - interface
    notify: save_cfg

  - name: Transit Interface Admin State
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.name }}"
        enabled: "{{ item.enabled }}"
    loop: "{{ l3_transit_interfaces[inventory_hostname] }}"
    tags:
    - admin_state
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# -----------------------------------------
# Play - Configure VRRP on Switch Interface
# -----------------------------------------
- name: Configure VRRP on Switch Interface
  hosts: aln_core:aln_fab
  tags: transit_vrrp
  gather_facts: no
  tasks:
  - name: Configure VRRP on Switch Interface
    cisco.ios.ios_config:
      lines: 
      - "vrrp {{ item.name.split('Vlan')[1] }} priority {{ vrrp[inventory_hostname].priority }}"
      - vrrp {{ item.name.split('Vlan')[1] }} ip {{ item.cidr | ipv4(1) | ipaddr('address') }}
      parents:
      - interface {{ item.name }}
    loop: "{{ l3_transit_interfaces[inventory_hostname] }}"
    when: (item.cidr.split('/')[1] == '29') and (item.ospf_active == false)
    tags:
    - vrrp
    - interface
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# ----------------------------------------------------------------------------
# Play - Global and Interface OSPF Configuration for BGP Next-Hop Reachability
# ----------------------------------------------------------------------------
- name: Configure OSPF on All Devices
  hosts: aln_wan:aln_core:aln_fab
  tags: ospf
  gather_facts: no
  tasks:
  - name: Global OSPF configuration
    cisco.ios.ios_ospfv2:
      config:
        processes:
        - process_id: "{{ item.ospf_process }}"
          router_id: "{{ 
            l3_transit_interfaces[inventory_hostname] |
            selectattr('description', 'equalto', 'main_loopback') |
            selectattr('vrf', 'equalto', item.vrf) |
            map(attribute='cidr') | ipv4(item.host_ip_index) | ipaddr('address') | join('') }}"
          vrf: "{{ item.vrf }}"
          max_metric:
            router_lsa: true
            on_startup:
              time: 110
          areas:
          - area_id: '0'
            default_cost: 5
      state: merged
    loop: "{{
      l3_transit_interfaces[inventory_hostname] |
      selectattr('ospf_active', 'equalto', true) |
      list }}"
    tags:
    - ospf_global
    notify: save_cfg

  - name: Interface OSPF Configuration on Transits
    cisco.ios.ios_ospf_interfaces:
      config:
        - name: "{{ item.name }}"
          address_family:
            - afi: ipv4
              process:
                id: "{{ item.ospf_process }}"
                area_id: 0
              bfd: true
              cost:
                interface_cost: 5
              hello_interval: 1
              dead_interval:
                time: 5
              network:
                point_to_point: true
    loop: "{{
      l3_transit_interfaces[inventory_hostname] |
      selectattr('ospf_active', 'equalto', true) |
      selectattr('physical', 'equalto', true) |
      list }}"
    tags:
    - ospf_phys_interface
    notify: save_cfg

  - name: Interface OSPF Configuration on Loopbacks
    cisco.ios.ios_ospf_interfaces:
      config:
        - name: "{{ item.name }}"
          address_family:
            - afi: ipv4
              process:
                id: "{{ item.ospf_process }}"
                area_id: 0
              cost:
                interface_cost: 5
    loop: "{{ 
      l3_transit_interfaces[inventory_hostname] |
      selectattr('ospf_active', 'equalto', true) |
      selectattr('physical', 'equalto', false) |
      list }}"
    tags:
    - ospf_loopback_interface
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# --------------------------------------
# Play - Enable BGP Community New Format
# --------------------------------------
- name: Enable BGP Community New Format
  hosts: aln
  tags: bgp
  gather_facts: no
  tasks:
  - name: Enable BGP Community New Format
    cisco.ios.ios_config:
      lines:
      - "ip bgp-community new-format"
    tags:
    - bgp_comm_new_format
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# --------------------------------
# Play - Build CONN_BGP Route-Maps
# --------------------------------
- name: Configure CONN_BGP Route-Maps
  hosts: aln_fab:aln_core:aln_wan
  tags: bgp
  gather_facts: no
  tasks:
  - name: Configure CONN_BGP Route-Maps
    cisco.ios.ios_route_maps:
      config:
      - route_map: "{{ item.name }}"
        entries:
        - sequence: "{{ item.sequence }}"
          action: "{{ item.action }}"
          match:
            interfaces: "{{ item.match_interfaces }}"
          set:
            community:
              number: "{{ 
                vrfs |
                selectattr('name', 'equalto', item.vrf) |
                map(attribute='bgp_community_number') |
                join('') }}"
      state: merged
    loop: "{{ redistribution.into_bgp.from_connected.route_map_entries }}"
    tags:
    - bgp_redist_route_map
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# ----------------------------------
# Play - Build STATIC_BGP Route-Maps
# ----------------------------------
- name: Configure STATIC_BGP Route-Maps
  hosts: aln_core
  tags: bgp
  gather_facts: no
  tasks:
  - name: Configure STATIC_BGP Route-Maps
    cisco.ios.ios_route_maps:
      config:
      - route_map: "{{ item.name }}"
        entries:
        - sequence: "{{ item.sequence }}"
          action: "{{ item.action }}"
          match:
            tag:
              tag_list: "{{ item.match_tags }}"
          set:
            community:
              number: "{{ 
                vrfs |
                selectattr('name', 'equalto', item.vrf) |
                map(attribute='bgp_community_number') |
                join('') }}"
      state: merged
    loop: "{{ redistribution.into_bgp.from_static.route_map_entries }}"
    tags:
    - bgp_redist_route_map
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode
  
# ------------------------
# Play - BGP Configuration
# ------------------------
- name: Configure BGP
  hosts: aln:ash
  tags: bgp
  gather_facts: no
  tasks:
  - name: Build Interface-IP to BGP ASN mappings For Each Device
    set_fact:
      device_map: "{{ 
        device_map | default({}) |
        combine ({ (item.cidr | ipv4(item.host_ip_index) | ipaddr('address')) : item.bgp_local_as }) }}"
    loop: "{{ 
      l3_transit_interfaces[inventory_hostname] |
      selectattr('cidr', 'defined') |
      list }}"
    tags:
    - build_ip_asn_map

  - name: Display the Dictionary
    debug: var=device_map
    tags:
    - build_ip_asn_map   

  - name: Combine Each Device Interface-IP to BGP ASN mappings 
    set_fact:
      ip_asn_map: "{{ ip_asn_map | default({}) | combine(item) }}"
    loop: "{{
          groups['all_devices'] |
          map('extract', hostvars) |
          selectattr('device_map', 'defined') |
          map(attribute='device_map') |
          list }}"
    tags:
    - build_ip_asn_map

  - name: Display Interface-IP to BGP ASN mappings 
    debug:
      var: ip_asn_map
    tags:
    - build_ip_asn_map

  - name: Configure Router-ID for each VRF
    cisco.ios.ios_config:
      lines:
      - "bgp router-id {{ 
            l3_transit_interfaces[inventory_hostname] |
            selectattr('description', 'equalto', 'main_loopback') |
            selectattr('vrf', 'equalto', item.name) |
            map(attribute='cidr') | ipaddr('address') | join('') }}"
      parents:
      - router bgp {{ bgp.local_asn }}
      - address-family ipv4 vrf {{ item.name }}
    when: item.name in l3_transit_interfaces[inventory_hostname] |
        selectattr('vrf', 'equalto', item.name ) |
        selectattr('description', 'equalto', 'main_loopback') |
        map(attribute='vrf') | list
    loop: "{{ vrfs }}"
    tags:
    - bgp_router_id
    notify: save_cfg

  - name: Configure Static Into BGP Redistribution
    cisco.ios.ios_config:
      lines:
      - redistribute static route-map {{ item.name }}
      parents:
      - router bgp {{ bgp.local_asn }}
      - address-family ipv4 vrf {{ item.vrf }}
    loop: "{{ redistribution.into_bgp.from_static.route_map_entries }}"
    when: redistribution.into_bgp.from_static is defined
    tags:
    - static_bgp_redistribution
    notify: save_cfg

  - name: Configure Connected Into BGP Redistribution
    cisco.ios.ios_config:
      lines:
      - redistribute connected route-map {{ item.name }}
      parents:
      - router bgp {{ bgp.local_asn }}
      - address-family ipv4 vrf {{ item.vrf }}
    loop: "{{ redistribution.into_bgp.from_connected.route_map_entries }}"
    when: redistribution.into_bgp.from_connected is defined
    tags:
    - conn_bgp_redistribution
    notify: save_cfg

  - name: Configure iBGP & eBGP Neighbors
    cisco.ios.ios_bgp_address_family:
      config:
        as_number: "{{ bgp.local_asn }}"
        address_family:
        - afi: ipv4
          safi: unicast
          vrf: "{{ item.vrf }}"
          neighbor:
          - address: "{{ item.cidr | ipv4(not item.host_ip_index)|string | ipaddr('address') }}" 
            activate: true
            remote_as: "{{ ip_asn_map[(item.cidr | ipv4(not item.host_ip_index)|string | ipaddr('address'))] }}"
            route_reflector_client: "{{ item.bgp_route_reflect }}"
            nexthop_self:
              all: false
              set: "{{ item.bgp_next_hop_self }}"
            timers:
              holdtime: "{{ bgp_holdtime }}"
              interval: "{{ bgp_keepalive_interval }}"
            soft_reconfiguration: true
            send_community:
              both: true
            password: "{{bgp_neighbor_pwd}}"
            route_maps:
              - name: "{{ item.description|upper }}_OUT_{{ item.vrf }}"
                out: true
              - name: "{{ item.description|upper }}_IN_{{ item.vrf }}"
                in: true
      state: merged
    loop: "{{
      l3_transit_interfaces[inventory_hostname] |
      selectattr('bgp', 'equalto', true) |
      list }}"
    tags:
    - bgp_neighbor
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode
  
# -------------------------------------------------------
# Play - Default and Summary To Firewall Inside Interface
# -------------------------------------------------------
- name: Configure Default and Summary Routes To Firewall Inside Interface
  hosts: aln_fab
  tags: outbound_static
  gather_facts: no
  tasks:
  - name: Add Private Summary Static Routes
    cisco.ios.ios_static_routes:
      config:
      - vrf: "{{ item.vrf }}"
        address_families:
        - afi: ipv4
          routes:
          - dest: "{{ item.cidr }}"
            next_hops:
            - forward_router_address: "{{ item.fw_next_hop }}"
              name: "{{ item.name }}"
    loop: "{{ private_summary_routes | selectattr('fw_next_hop', 'defined') }}"
    tags:
    - static_route
    notify: save_cfg

  - name: Add Default Static Routes
    cisco.ios.ios_static_routes:
      config:
      - vrf: "{{ item.vrf }}"
        address_families:
        - afi: ipv4
          routes:
          - dest: "{{ item.cidr }}"
            next_hops:
            - forward_router_address: "{{ item.fw_next_hop }}"
              name: "{{ item.name }}"
    loop: "{{ default_route | selectattr('fw_next_hop', 'defined') }}"
    tags:
    - static_route
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# -----------------------------------------------------------------------
# Play - Tenant Static Routes With Firewall Outside Interface as Next-Hop
# -----------------------------------------------------------------------
- name: Configure Tenant Static Routes To Firewall Outside Interface
  hosts: aln_core
  tags: tenant_static
  gather_facts: no
  tasks:
  - name: Add Tenant Network Static Routes
    cisco.ios.ios_static_routes:
      config:
      - vrf: CORE
        address_families:
        - afi: ipv4
          routes:
          - dest: "{{ item.cidr }}"
            next_hops:
            - forward_router_address: "{{ item.fw_next_hop }}"
              name: "{{ item.description }}"
              tag: 1000
    loop: "{{ tenant_networks | selectattr('fw_next_hop', 'defined') }}"
    tags:
    - static_route
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode

# -------------------------------
# Play - Configure Tenant Network 
# -------------------------------
- name: Configure Tenant Network 
  hosts: aln_fab
  tags: tenant_network_interface
  gather_facts: no
  tasks:
  - name: Create Tenant Vlans in DB
    cisco.ios.ios_vlans:
      config:
      - name: "{{ item.description }}"
        vlan_id: "{{ item.interface.split('Vlan')[1] }}"
        state: active
        shutdown: disabled
      state: merged
    tags:
    - vlan_db
    loop: "{{ tenant_networks }}"
    notify: save_cfg

  - name: Configure Tenant Network Interface
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.interface }}"
        description: "{{ item.description }}"
      state: merged
    tags:
    - interface
    - physical
    loop: "{{ tenant_networks }}"
    notify: save_cfg

  - name: Associate Interface to VRF
    cisco.ios.ios_config:
      lines:
      - vrf forwarding {{ item.vrf }}
      parents:
      - interface {{ item.interface }}
    loop: "{{ tenant_networks }}"
    tags:
    - vrf_interface
    notify: save_cfg

  - name: Assign IPv4 Address to Interface Interface
    cisco.ios.ios_l3_interfaces:
      config: 
      - name: "{{ item.interface }}"
        ipv4:
        - address: "{{ item.cidr | ipv4(vrrp[inventory_hostname].host_ip_index) }}" 
    loop: "{{ tenant_networks }}"
    tags:
    - ip_address
    - interface
    notify: save_cfg

  - name: Configure VRRP on Tenant Interface
    cisco.ios.ios_config:
      lines: 
      - "vrrp {{ item.interface.split('Vlan')[1] }} priority {{ vrrp[inventory_hostname].priority }}"
      - vrrp {{ item.interface.split('Vlan')[1] }} ip {{ item.cidr | ipv4(1) | ipaddr('address') }}
      parents:
      - interface {{ item.interface }}
    loop: "{{ tenant_networks}}"
    tags:
    - vrrp
    - interface
    notify: save_cfg

  - name: Add Interface to CONN_BGP Route-Map
    cisco.ios.ios_route_maps:
      config:
      - route_map: "CONN_BGP_{{ item.vrf }}"
        entries:
        - sequence: 1000
          action: permit
          match:
            interfaces: "{{ tenant_networks | selectattr('vrf', 'equalto', item.vrf) | map(attribute='interface') | list }}"
          set:
            community:
              number: "{{ 
                vrfs |
                selectattr('name', 'equalto', item.vrf) |
                map(attribute='bgp_community_number') |
                join('') }}"
      state: merged
    loop: "{{ tenant_networks }}"
    tags:
    - bgp_redist_route_map
    notify: save_cfg

  - name: Interface Admin State
    cisco.ios.ios_interfaces:
      config:
      - name: "{{ item.interface }}"
        enabled: "{{ item.enabled }}"
    loop: "{{ tenant_networks }}"
    tags:
    - admin_state
    notify: save_cfg

  handlers:
  - name: save_cfg
    ios_command:
      commands:
      - write mem
    when: not ansible_check_mode
